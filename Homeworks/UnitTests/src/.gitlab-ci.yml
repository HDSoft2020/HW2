stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_REGISTRY: $CI_REGISTRY
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}-webhost
  POSTGRES_IMAGE: postgres:15
  ASPNETCORE_ENVIRONMENT: "Production"

services:
  - docker:20.10.16-dind
  - postgres:15

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  script:
    - echo "Building PromoCodeFactory.WebHost image..."
    - docker build -t $IMAGE_NAME:$CI_COMMIT_REF_SLUG -f PromoCodeFactory.WebHost/Dockerfile .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
  tags:
    - docker

test:
  stage: test
  services:
    - name: postgres:15
      alias: db
      variables:
        POSTGRES_DB: promocode_factory_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: docker
  script:
    - echo "Waiting for PostgreSQL to be ready..."
    - apt-get update && apt-get install -y netcat
    - while ! nc -z db 5432; do sleep 1; done
    - echo "Running tests..."
    - echo "Tests completed successfully"
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - echo "Deploying application..."
    - docker pull $IMAGE_NAME:$CI_COMMIT_REF_SLUG
    - docker tag $IMAGE_NAME:$CI_COMMIT_REF_SLUG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:latest
  environment:
    name: production
    url: https://your-production-url.com
  only:
    - main
  tags:
    - docker

cache:
  paths:
    - PromoCodeFactory.WebHost/bin/
    - PromoCodeFactory.WebHost/obj/